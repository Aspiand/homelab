name: infra

services:
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_LABEL_ENABLE: true
      WATCHTOWER_SCHEDULE: 0 0 2 * * *
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATION_TEMPLATE: |
        {{- if .Report -}}
          {{- with .Report -}}
        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed
              {{- range .Updated}}
        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}
              {{- end -}}
              {{- range .Fresh}}
        - {{.Name}} ({{.ImageName}}): {{.State}}
            {{- end -}}
            {{- range .Skipped}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
            {{- range .Failed}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
          {{- end -}}
        {{- else -}}
          {{range .Entries -}}{{.Message}}{{"\n"}}{{- end -}}
        {{- end -}}

  tailscale:
    container_name: tailscale
    image: ghcr.io/tailscale/tailscale:latest
    hostname: ${TS_HOSTNAME}
    network_mode: host
    restart: always
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_STATE_DIR: /var/lib/tailscale
      TS_USERSPACE: false
    volumes:
      - ts-authkey:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    labels:
      com.centurylinklabs.watchtower.enable: true

  tsdproxy:
    image: almeidapaulopt/tsdproxy:1
    container_name: tsdproxy
    restart: unless-stopped
    networks:
      - tsdproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config:/config
      - tsdproxy-data:/data
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
    env_file:
      - .env
    # ports:
    #   - 8080:8080

  cloudflare-tunnel:
    image: docker.io/cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    networks:
      - cloudflare
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # - ./config/hosts:/etc/hosts
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    labels:
      com.centurylinklabs.watchtower.enable: true

  beszel:
    image: henrygd/beszel:latest
    container_name: beszel
    restart: unless-stopped
    # ports:
    #   - 8090:8090
    networks:
      - tsdproxy
    volumes:
      - ./beszel_data:/beszel_data
      - ./beszel_socket:/beszel_socket
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "beszel"
      com.centurylinklabs.watchtower.enable: true

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host
    volumes:
      - /mnt/hz128/.beszel:/extra-filesystems/hz128:ro
      - ./beszel_socket:/beszel_socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      LISTEN: /beszel_socket/beszel.sock
      KEY: '${BESZEL_KEY}' # Do not remove quotes around the key
    depends_on:
      - beszel
    labels:
      com.centurylinklabs.watchtower.enable: true

volumes:
  ts-authkey:
  tsdproxy-data:

networks:
  default:
    name: infra
    driver: bridge
  cloudflare:
    name: cloudflare_tunnel
    driver: bridge
  tsdproxy:
    name: tsdproxy
    driver: bridge
